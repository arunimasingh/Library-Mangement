/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import com.db.Connection.DbConnection;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nivi
 */
public class RefreshFines extends javax.swing.JFrame {

    private DbConnection db;
    private Connection con;
    private Statement s,st,stat;
    private ResultSet rs;
    private String query;
    private int loanid;
    private ResultSet r;
    private Date due;
    private DefaultTableModel model;
    private int flag;
    private ResultSet rp;
    private Object paid;
    private Date datein;
    private DefaultTableModel model1;

    /**
     * Creates new form RefreshFines
     */
    public RefreshFines() {
        initComponents();
        btnViewPaid.setEnabled(false);
        btnCheckIn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Borrower = new javax.swing.JTable();
        btnViewPaid = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fine = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnCheckIn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management System");
        setBounds(new java.awt.Rectangle(100, 50, 1000, 650));
        setPreferredSize(new java.awt.Dimension(1286, 735));

        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        Borrower.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card Number", "Borrower Name", "Fine Paid/Due"
            }
        ));
        jScrollPane2.setViewportView(Borrower);

        btnViewPaid.setText("View Paid Fines");
        btnViewPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPaidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnViewPaid)
                        .addGap(138, 138, 138)
                        .addComponent(btnHome))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(619, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHome)
                    .addComponent(btnViewPaid))
                .addGap(0, 245, Short.MAX_VALUE))
        );

        fine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loan_id", "Fine Amount", "Paid"
            }
        ));
        jScrollPane1.setViewportView(fine);

        jLabel1.setText("Fines Per Loan");

        jLabel2.setText("Fines per Borrower");

        btnRefresh.setText("View Outstanding Fines");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnCheckIn.setText("Check In");
        btnCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCheckIn)
                                .addGap(159, 159, 159)
                                .addComponent(btnRefresh)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabel1)
                        .addGap(508, 508, 508)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefresh)
                            .addComponent(btnCheckIn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        Home hm=new Home();
        hm.setVisible(true);
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        btnViewPaid.setEnabled(true);
        btnRefresh.setEnabled(false);
        btnCheckIn.setEnabled(true);
        try
        {
                model=(DefaultTableModel)fine.getModel();
                model1=(DefaultTableModel)Borrower.getModel();
                model.setRowCount(0);
                model1.setRowCount(0);
            	db = new DbConnection();
		con = db.getConnection();
		s = con.createStatement();
                query="SELECT loan_id,due_date from book_loans where date_in is NULL and due_date<curdate();";
                rs=s.executeQuery(query);
                
                while(rs.next())
                {
                    loanid=rs.getInt("loan_id");
                    due=rs.getDate("due_date");
                    
                    query="select count(*) from fines where loan_id="+loanid+";";
                    stat=con.createStatement();
                    r=stat.executeQuery(query);
                    
                    while(r.next())
                    {
                        query="update fines set fine_amt=(datediff(curdate(),'"+due+"')*0.25) where loan_id="+loanid+" and paid=false;";
                        st=con.createStatement();
                        st.executeUpdate(query);
                        
                    }
                    query="select loan_id from book_loans where loan_id="+loanid+" and loan_id not in (select loan_id from fines where loan_id="+loanid+");";
                    stat=con.createStatement();
                    rp=stat.executeQuery(query);
                    while(rp.next())
                    {
                        
                        query="insert into fines(loan_id,fine_amt) values("+loanid+",(datediff(curdate(),'"+due+"')*0.25));";
                        st=con.createStatement();
                        st.executeUpdate(query);
                    }
                    
                }
                query="select loan_id,due_date,date_in from book_loans where due_date<date_in;";
                rs=s.executeQuery(query);
                
                while(rs.next())
                {
                    loanid=rs.getInt("loan_id");
                    due=rs.getDate("due_date");
                    datein=rs.getDate("date_in");
                    query="select count(*) from fines where loan_id="+loanid+";";
                    stat=con.createStatement();
                    r=stat.executeQuery(query);
                    while(r.next())
                    {
                        
                        query="update fines set fine_amt=(datediff('"+datein+"','"+due+"')*0.25) where loan_id="+loanid+" and paid=true;";
                        st=con.createStatement();
                        st.executeUpdate(query);
                    }
                    query="select loan_id from book_loans where loan_id="+loanid+" and loan_id not in (select loan_id from fines where loan_id="+loanid+");";
                    stat=con.createStatement();
                    rp=stat.executeQuery(query);
                    while(rp.next())
                    {
                        query="insert into fines(loan_id,fine_amt,paid) values("+loanid+",(datediff('"+datein+"','"+due+"')*0.25),true);";
                        st=con.createStatement();
                        st.executeUpdate(query);
                    }
                }
                 query="select * from fines;";
                 rs=s.executeQuery(query);
                 while(rs.next())
                 {
                     int loan=rs.getInt("loan_id");
                     double amt=rs.getDouble("fine_amt");
                     if(rs.getBoolean("paid")==true){
                         paid="Yes";
                     }
                     else{
                        paid="No";
                     model.addRow(new Object[] {loan,amt,paid});
                     
                     }
                 }
                query="select bl.card_no,sum(fine_amt) as fine,fname,lname from book_loans bl join fines f on f.loan_id=bl.loan_id join borrower b on b.card_no=bl.card_no where paid=false group by(b.card_no);";
                 rs=s.executeQuery(query);
                 while(rs.next())
                 {
                     String card=rs.getString("card_no");
                     double fine=rs.getDouble("fine");
                     String name=rs.getString("fname")+" " +rs.getString("lname");
                     model1.addRow(new Object[] {card,name,fine});
                 }
        }
        catch(SQLException exp)
        {
		JOptionPane.showMessageDialog(this, exp.getMessage());
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnViewPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPaidActionPerformed
        // TODO add your handling code here:
        try
        {
                model=(DefaultTableModel)fine.getModel();
                model1=(DefaultTableModel)Borrower.getModel();
                model.setRowCount(0);
                model1.setRowCount(0);
            	db = new DbConnection();
		con = db.getConnection();
		s = con.createStatement();
                 query="select * from fines;";
                 rs=s.executeQuery(query);
                 while(rs.next())
                 {
                     int loan=rs.getInt("loan_id");
                     double amt=rs.getDouble("fine_amt");
                     if(rs.getBoolean("paid")==true){
                         paid="Yes";
                       model.addRow(new Object[] {loan,amt,paid});
                      
                     }
                     else
                        paid="No";
                   
                 }
                query="select bl.card_no,sum(fine_amt) as fine,fname,lname from book_loans bl join fines f on f.loan_id=bl.loan_id join borrower b on b.card_no=bl.card_no where paid=true group by(b.card_no);";
                 rs=s.executeQuery(query);
                 while(rs.next())
                 {
                     String card=rs.getString("card_no");
                     double fine=rs.getDouble("fine");
                     String name=rs.getString("fname")+" " +rs.getString("lname");
                     model1.addRow(new Object[] {card,name,fine});
                 }
                 btnRefresh.setEnabled(true);
                 btnViewPaid.setEnabled(false);
                 btnCheckIn.setEnabled(false);
                
        }
        catch(SQLException exp)
        {
		JOptionPane.showMessageDialog(this, exp.getMessage());
        }                                          
    }//GEN-LAST:event_btnViewPaidActionPerformed

    private void btnCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInActionPerformed
        // TODO add your handling code here:  int[] row = fine.getSelectedRows();
	int []row=fine.getSelectedRows();
        try {
		// establish db connection	
		db = new DbConnection();
		con = db.getConnection();
		s = con.createStatement();
                
                for(int i=0 ;i<row.length;i++){
                        Double fi=(Double) fine.getValueAt(row[i],1);
                        int loanid=(int) fine.getValueAt(row[i],0);
                        if(fi>0.0)
                        {
                            JOptionPane.showMessageDialog(this, "Pay Fine");
                            query="UPDate fines set paid=true where loan_id="+Integer.parseInt(((fine.getValueAt(row[i],0)).toString()))+"";
                            s.executeUpdate(query);
                        }
                        query = "UPDATE BOOK_LOANS SET date_in = current_date() where loan_id ="+Integer.parseInt(((fine.getValueAt(row[i], 0)).toString()))+"";			
			s.executeUpdate(query);
                        JOptionPane.showMessageDialog(this, "Check In done successfully");
                }
                btnCheckIn.setEnabled(false);
                model.setRowCount(0);
                model1.setRowCount(0);
                btnRefresh.setEnabled(true);
                btnViewPaid.setEnabled(false);
                rs.close();
                s.close();
                con.close();
                }
        catch (SQLException e1) {
			JOptionPane.showMessageDialog(this, "Error:" + e1.getMessage());
        }

    }//GEN-LAST:event_btnCheckInActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RefreshFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RefreshFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RefreshFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RefreshFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RefreshFines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Borrower;
    private javax.swing.JButton btnCheckIn;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnViewPaid;
    private javax.swing.JTable fine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
