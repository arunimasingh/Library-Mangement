/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import com.db.Connection.DbConnection;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nivi
 */
public class SearchBook extends javax.swing.JFrame {

    private String book_title;
    private String book_isbn;
    private String book_author;
    private DbConnection db;
    private Connection con;
    private Statement s;
    private ResultSet rs;
    private String book_id;
    public String query;
    private Object car;
    private int no_of_loans_of_the_borrower;
    private int[] row;
    private int loanid;

    /**
     * Creates new form SearchBook
     */
    public SearchBook() {
        initComponents();
        btnCheckOut.setEnabled(false);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        BooksPanel = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        lblIsbn = new javax.swing.JLabel();
        isbn = new javax.swing.JTextField();
        lblAuthor = new javax.swing.JLabel();
        at = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management System");
        setBounds(new java.awt.Rectangle(100, 50, 1000, 650));
        setFont(new java.awt.Font("Baskerville", 0, 10)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1286, 735));

        BooksPanel.setFont(new java.awt.Font("Chalkboard SE", 0, 14)); // NOI18N
        BooksPanel.setText("Search Books");

        lblTitle.setText("Book title");

        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });

        lblIsbn.setText("ISBN");

        lblAuthor.setText("Author");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSearch)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTitle)
                        .addComponent(lblIsbn)
                        .addComponent(lblAuthor)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                                    .addComponent(isbn)
                                    .addComponent(at))
                                .addGap(32, 32, 32))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(BooksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(274, 274, 274))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnReset)
                        .addGap(88, 88, 88)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(btnCheckOut)
                        .addGap(24, 24, 24))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BooksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblIsbn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(isbn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(lblAuthor))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(at, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(jButton1)
                    .addComponent(btnSearch)
                    .addComponent(btnCheckOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Book title", "Author", "Branch ID", "Branch Name", "Total Copies", "Available_copies"
            }
        ));
        jScrollPane1.setViewportView(SearchTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(269, 269, 269))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        book_title=title.getText();
        book_author=at.getText();
        book_isbn=isbn.getText();
        btnReset.setEnabled(true);
        btnSearch.setEnabled(false);
       
        
        if(book_title.isEmpty() && book_isbn.isEmpty() && book_author.isEmpty())
        {
			JOptionPane.showMessageDialog(null, "Please enter atleast one field");
                        btnSearch.setEnabled(true);
                        return;
		
        }
        else
        {
            model=(DefaultTableModel)SearchTable.getModel();
            try{
			db = new DbConnection();
			con = db.getConnection();
                        s = con.createStatement();
                        // all three given d
                        if(!book_author.isEmpty()&&!book_title.isEmpty()&&!book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and a.fullname like '%"+book_author+"%' and b.isbn like '%"+book_isbn+"%' and b.title like '%"+book_title+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;  
                            }
                        }
                        //title and isbn d
                        if(book_author.isEmpty()&&!book_title.isEmpty()&&!book_isbn.isEmpty())
                        {
                         query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and b.isbn like '%"+book_isbn+"%' and b.title like '%"+book_title+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;  
                            }
                        }
                        //author and isbn d
                        if(!book_author.isEmpty()&&book_title.isEmpty()&&!book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and a.fullname like '%"+book_author+"%' and b.isbn like '%"+book_isbn+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;  
                            }
                        }
                        //author and title d
                        if(!book_author.isEmpty()&&!book_title.isEmpty()&&book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and a.fullname like '%"+book_author+"%' and b.title like '%"+book_title+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;  
                            }
                        }
                        //isbn d
                        if(book_author.isEmpty()&&book_title.isEmpty()&&!book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and b.isbn like '%"+book_isbn+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;      
                            }
                        }
                        //author d
                        if(!book_author.isEmpty()&&book_title.isEmpty()&&book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and a.fullname like '%"+book_author+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;  
                            }
                        }
                        //title d
                        if(book_author.isEmpty()&&!book_title.isEmpty()&&book_isbn.isEmpty())
                        {
                        query="select b.isbn,b.title,a.fullname,l.branch_id,l.branch_name,bc.no_of_copies,no_of_copies-(select count(*) from book_loans where isbn=b.isbn and branch_id=bc.branch_id and date_in is null) as available_Copies  from book b natural join book_authors join authors a on book_authors.author_id=a.author_id join book_copies bc on bc.book_id=b.isbn,library_branch l where l.branch_id=bc.branch_id and b.title like '%"+book_title+"%' having no_of_copies>0;";
			rs=s.executeQuery(query);
			while (!rs.isBeforeFirst()) {
				JOptionPane.showMessageDialog(this, "Book does not exist");
				return;      
                            }
                            
                        }
                        while (rs.next()) {
				 String bookid = rs.getString("isbn");
				 int branch_id = rs.getInt("branch_id");
				 int branch_copies = rs.getInt("no_of_copies");
                                 String branch_name=rs.getString("branch_name");
	             String bookTitle = rs.getString("title");
	             String author_name = rs.getString("fullname");
	            String available_copies = rs.getString("available_Copies");
                    model.addRow(new Object[]{bookid,bookTitle,author_name,branch_id,branch_name,branch_copies,available_copies});
                    
                                    }
                         btnCheckOut.setEnabled(true);
                    rs.close();
                    s.close();
                    con.close();
                    //benCheckOut.setEnabled(true);
                    }
                    catch (SQLException exp) {
			JOptionPane.showMessageDialog(this, "Error:" + exp.getMessage());
    }//GEN-LAST:event_btnSearchActionPerformed
    }
    }
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        title.setText("");
        at.setText("");
        isbn.setText("");
        model.setRowCount(0);
        btnReset.setEnabled(false);
        btnSearch.setEnabled(true);
         btnCheckOut.setEnabled(false);

    }//GEN-LAST:event_btnResetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    Home hm=new Home();
    hm.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:

        try{
                db = new DbConnection();
                con = db.getConnection();
                s = con.createStatement();
                car=JOptionPane.showInputDialog("Enter the card number", car);
                query="SELECT card_no from BORROWER WHERE card_no = '"+car+"';";
		rs=s.executeQuery(query);
                if(!rs.next()) {
			JOptionPane.showMessageDialog(this, "Invalid Card Number");
                        btnCheckOut.setEnabled(true);
			return;
                }
                query="SELECT count(*) as count FROM book_loans WHERE card_no='"+car+"' and date_in is NULL;";
                rs=s.executeQuery(query);
                if(rs.next())
                {
                    no_of_loans_of_the_borrower=rs.getInt("count");
                }
                 if(no_of_loans_of_the_borrower==3)
                {
                   JOptionPane.showMessageDialog(null, "Reached maximum number of loans");
                   return;
                }
                query="select count(*) as count,sum(fine_amt) as fine,fname,lname from book_loans bl join fines f on f.loan_id=bl.loan_id join borrower b on b.card_no=bl.card_no where paid=false and bl.card_no='"+car+"'group by(b.card_no);";
                rs=s.executeQuery(query);
                if(rs.next())
                {
                int count=rs.getInt("count");
                Double fine=rs.getDouble("fine");
                if(!(count==0))
                {
                    JOptionPane.showMessageDialog(null, "Borrowed books not returned. Fine due is"+""+fine);
                    return;
                }
                }
                int[] row = SearchTable.getSelectedRows();
                for(int i=0 ;i<row.length;i++){
                    
                        String bookisbn=(String) SearchTable.getValueAt(row[i],0);
                        int branchhid;
                        branchhid = (int) SearchTable.getValueAt(row[i],3);
                        /*query="Select count(*) as iddd from book_loans;";
                        rs=s.executeQuery(query);
                        if(rs.next())
                        {
                        loanid=rs.getInt("iddd");
                        loanid+=1;
                        }*/
                        query="INSERT INTO book_loans(isbn,branch_id,card_no,date_out,due_date) VALUES('"+bookisbn+"','"+branchhid+"','"+car+"',current_date(),date_add(current_date,interval 14 day));";
                        s.executeUpdate(query);
                        title.setText("");
                        at.setText("");
                        isbn.setText("");
                        model.setRowCount(0);
                        btnReset.setEnabled(false);
                        btnSearch.setEnabled(true);
                        btnCheckOut.setEnabled(false);
                        JOptionPane.showMessageDialog(this, "Check Out Successful");
                        return;
                }

            
        }
        catch(SQLException exp) {
			JOptionPane.showMessageDialog(this, "Error:" + exp.getMessage());
            }
       
    }//GEN-LAST:event_btnCheckOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchBook().setVisible(true);
            }
            
        });
    }
    private javax.swing.table.DefaultTableModel model;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BooksPanel;
    private javax.swing.JTable SearchTable;
    private javax.swing.JTextField at;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTextField isbn;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblIsbn;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables
}
